from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
import random
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
OPENWEATHER_API_KEY = "a9490cc69b99d88eaa4d7507b356968f"
TELEGRAM_BOT_TOKEN = "8475963022:AAF6Cd_XZau_pBgmUuQVPUc9DnRAmCChfmw"
CITY = "Saratov"
COUNTRY_CODE = "RU"

# –ù–æ–≤—ã–π API –¥–ª—è —Å–æ–±—ã—Ç–∏–π - TimePad
TIMEPAD_API_URL = "https://api.timepad.ru/v1/events"

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query.data == "conditions":
        query = update.callback_query
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ API –∫–ª—é—á
            if OPENWEATHER_API_KEY in ["–≤–∞—à_–∫–ª—é—á_openweathermap_–∑–¥–µ—Å—å", "your_openweather_api_key_here"]:
                await context.bot.send_message(chat_id=query.message.chat_id,
                    text="‚ùå API –∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞:\n"
                    "https://home.openweathermap.org/api_keys\n\n"
                    "–ò –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ OPENWEATHER_API_KEY –≤ –∫–æ–¥–µ"
                )
                return
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
            url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY},{COUNTRY_CODE}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(url, timeout=10)
            data = response.json()
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
                temp = data['main']['temp']
                feels_like = data['main']['feels_like']
                humidity = data['main']['humidity']
                pressure = data['main']['pressure']
                description = data['weather'][0]['description']
                wind_speed = data['wind'].get('speed', '–Ω/–¥')
            
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                weather_message = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–∞—Ä–∞—Ç–æ–≤–µ:\n"
                    f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
                    f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                    f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
                )
                await update.callback_query.answer()
                await context.bot.send_message(chat_id=query.message.chat_id,
                text=weather_message)
        
            elif response.status_code == 401:
                await context.bot.send_message(chat_id=query.message.chat_id,
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeatherMap!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–ª—é—á –Ω–∞:\n"
                    "https://home.openweathermap.org/api_keys\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)"
                )
        
            else:
                error_msg = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await context.bot.send_message(chat_id=query.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}")
            
        except requests.exceptions.Timeout:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text="‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã")
        except requests.exceptions.ConnectionError:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text="üì° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "guide":
        query = update.callback_query
        await update.callback_query.answer()
        await context.bot.send_message(chat_id=query.message.chat_id,
        text="–ì–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É –°–∞—Ä–∞—Ç–æ–≤—É –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –≥–æ—Ä–æ–¥–µ!")
        
async def random_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "random_event":
        query = update.callback_query
        await update.callback_query.answer()
        try:
            params = {
                'limit': 20,
                'cities': '–°–∞—Ä–∞—Ç–æ–≤',
                'fields': 'name,description_short,starts_at,location,poster_image,url',
                'sort': '+starts_at'
            }
            
            headers = {
                'Authorization': 'Bearer 1afd1183be12d044663e1c7d5634e0ffa563e0ff'
            }
            
            response = requests.get(TIMEPAD_API_URL, params=params, headers=headers, timeout=10)
            data = response.json()
            
            if response.status_code == 200 and data.get('values'):
                event = random.choice(data['values'])
                
                event_message = f"üé≠ {event['name']}\n\n"
                if event.get('description_short'):
                    event_message += f"{event['description_short'][:300]}...\n\n"
                if event.get('starts_at'):
                    event_date = datetime.fromisoformat(event['starts_at'].replace('Z', '+00:00'))
                    event_message += f"üìÖ {event_date.strftime('%d.%m.%Y %H:%M')}\n"
                if event.get('location', {}).get('city'):
                    event_message += f"üìç {event['location']['city']}"
                    if event.get('location', {}).get('address'):
                        event_message += f", {event['location']['address']}\n"
                    else:
                        event_message += "\n"
                if event.get('url'):
                    event_message += f"üîó {event['url']}"
                
                if event.get('poster_image'):
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=event['poster_image']['default_url'],
                        caption=event_message
                    )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=event_message
                    )
            else:
                await context.bot.send_message(chat_id=query.message.chat_id,
                                               text="‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –≤ –≥–æ—Ä–æ–¥–µ –°–∞—Ä–∞—Ç–æ–≤.")
        except Exception as e:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}"
            )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –°–∞—Ä–∞—Ç–æ–≤–µ", callback_data="conditions")],
        [InlineKeyboardButton("–ì–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É", callback_data="guide")],
        [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∏–π –ì—É–ª–ª–∏–≤–µ—Ä!\n\n"
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if len(TELEGRAM_BOT_TOKEN) > 20 else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"OpenWeather –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENWEATHER_API_KEY not in ['–≤–∞—à_–∫–ª—é—á_openweathermap_–∑–¥–µ—Å—å', 'your_openweather_api_key_here'] else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(weather, pattern="^conditions$"))
    app.add_handler(CallbackQueryHandler(guide, pattern="^guide$"))
    app.add_handler(CallbackQueryHandler(random_event, pattern="^random_event$"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
    app.run_polling()

if __name__ == "__main__":
    main()
