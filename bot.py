from telegram import Update, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, KeyboardButton, InputMediaPhoto, InputMediaVideo
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import requests
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß!
OPENWEATHER_API_KEY = "a9490cc69b99d88eaa4d7507b356968f"  # –ó–î–ï–°–¨ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–ê–® –ö–õ–Æ–ß OPENWEATHERMAP
YANDEX_REQUEST_MAP_API_KEY = "27d46ff8-77d0-4b9f-9246-d3cb01e5ad9d"
TELEGRAM_BOT_TOKEN_normal = "8475963022:AAF6Cd_XZau_pBgmUuQVPUc9DnRAmCChfmw"
TELEGRAM_BOT_TOKEN = "5862928083:AAFjQ9YyeW3ohHtgNfBisW73-S87WB0QBSs"
CITY = "Saratov"
COUNTRY_CODE = "RU"

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query.data == "conditions":
        query = update.callback_query
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ API –∫–ª—é—á
            if OPENWEATHER_API_KEY in ["–≤–∞—à_–∫–ª—é—á_openweathermap_–∑–¥–µ—Å—å", "your_openweather_api_key_here"]:
                await context.bot.send_message(chat_id=query.message.chat_id,
                    text="‚ùå API –∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞:\n"
                    "https://home.openweathermap.org/api_keys\n\n"
                    "–ò –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ OPENWEATHER_API_KEY –≤ –∫–æ–¥–µ"
                )
                return
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
            url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY},{COUNTRY_CODE}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(url, timeout=10)
            data = response.json()
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
                temp = data['main']['temp']
                feels_like = data['main']['feels_like']
                humidity = data['main']['humidity']
                pressure = data['main']['pressure']
                description = data['weather'][0]['description']
                wind_speed = data['wind'].get('speed', '–Ω/–¥')
            
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                weather_message = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–∞—Ä–∞—Ç–æ–≤–µ:\n"
                    f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                    f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n"
                    f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                    f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
                )
                await update.callback_query.answer()
                await context.bot.send_message(chat_id=query.message.chat_id,
                text=weather_message)
        
            elif response.status_code == 401:
                await context.bot.send_message(chat_id=query.message.chat_id,
                    text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeatherMap!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–ª—é—á –Ω–∞:\n"
                    "https://home.openweathermap.org/api_keys\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)"
                )
        
            else:
                error_msg = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await context.bot.send_message(chat_id=query.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}")
            
        except requests.exceptions.Timeout:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text="‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã")
        except requests.exceptions.ConnectionError:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text="üì° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

async def geo_permission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query.data == "geopermission":
        query = update.callback_query

        keyboard = [[KeyboardButton("–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

        await query.answer()
        await context.bot.send_message(chat_id=query.message.chat_id,
        text="–Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=reply_markup)

async def get_nearest_good_places(location, update, context):
    span = f"{0.008984},{0.008984}" # 1 –∫–∏–ª–æ–º–µ—Ç—Ä
    params = {
        "apikey": YANDEX_REQUEST_MAP_API_KEY,
        "text": "–•–æ—Ä–æ—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è",
        "lang": "ru_RU",
        "ll": f"{location.longitude},{location.latitude}",
        "spn": span
    }
    response = requests.get("https://search-maps.yandex.ru/v1/", params=params)
    await context.bot.send_message(chat_id=update.effective_chat.id,
    text=f"{response} {response.url}")

async def near_to_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    if location:
        await context.bot.send_message(chat_id=update.effective_chat.id,
        text="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë –¥–æ–≤–µ—Ä–∏–µ –∫–æ –º–Ω–µ! –î–µ—Ä–∂–∏ —à–∏–∫–∞—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö –∫ —Ç–µ–±–µ –º–µ—Å—Ç:",
        reply_markup=ReplyKeyboardRemove())
        await get_nearest_good_places(location, update, context)


async def gorpark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "gorpark":
        keyboard = [
        [InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="nabka")]
        ]
        query = update.callback_query
        await update.callback_query.answer()
        
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(chat_id=query.message.chat_id,
        text="–ì–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É –°–∞—Ä–∞—Ç–æ–≤—É –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –≥–æ—Ä–æ–¥–µ!")

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://pp.vk.me/c628225/v628225107/26cd5/wAqYn5ApXOQ.jpg")
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="gorpark.mp4",
        caption="–ì–æ—Ä–ø–∞—Ä–∫ —ç—Ç–æ —à–∏–∫–∞—Ä–Ω–æ–µ –º–µ—Å—Ç–æ",
				reply_markup=reply_markup)

async def nabka(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "nabka":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="gorpark"), InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="lipki")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://saratov.travel/upload/resize_cache/iblock/727/800_800_1/6kexsl38l39dqiqo8xvcyzhlk5oh3qit.jpg")
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="nabka.mp4",
        caption="–ê –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!",
        reply_markup=reply_markup)

async def lipki(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "lipki":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="nabka"), InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="utoli")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://img.tourister.ru/files/3/3/9/1/7/5/1/0/2/original.jpg")
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="lipki.mp4",
        caption="–ê –ª–∏–ø–∫–∏ —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!",
        reply_markup=reply_markup)

async def utoli(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "utoli":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="lipki"), InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="conserva")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://cdn-imgproxy.mamado.su/7u7PXEMY0t4nQlCVI-XgWcDomrKi-dObs_pLLDpPVBA/rs:fit:2000:2000:1/g:ce/q:90/czM6Ly9tYW1hZG8t/YXBpLXByb2R1Y3Rp/b24vc3RvcmFnZS8x/Mjc3MTczL1NjcmVl/bnNob3RfMy5wbmc.webp")
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="utoli.mp4",
        caption="–ê —É—Ç–æ–ª–∏ —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!",
        reply_markup=reply_markup)

async def conserva(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "conserva":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="utoli"), InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="avenue")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://static.gorodzovet.ru/uploads/venue/venuelogo-2903106.jpg?v=")
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="conserva.mp4",
        caption="–ê –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!",
        reply_markup=reply_markup)

async def avenue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "avenue":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="conserva"), InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="circus")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://www.tursar.ru/uploads/img361_5.jpg",
        reply_markup=reply_markup)
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="avenue.mp4",
        caption="–ê –ø—Ä–æ—Å–ø–µ–∫—Ç —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!")

async def circus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == "circus":
        keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="avenue")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        await update.callback_query.answer()

        await context.bot.send_photo(chat_id=query.message.chat_id,
        photo="https://upload.wikimedia.org/wikipedia/commons/6/66/%D0%A6%D0%B8%D1%80%D0%BA_%D0%B2_%D0%A1%D0%B0%D1%80%D0%B0%D1%82%D0%BE%D0%B2%D0%B5.jpg",
        reply_markup=reply_markup)
        await context.bot.send_video(chat_id=query.message.chat_id,
        video="circus.mp4",
        caption="–ê —Ü–∏—Ä–∫ —ç—Ç–æ –≤–æ–æ–±—â–µ –æ—Ç–ø–∞–¥!")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
      [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –°–∞—Ä–∞—Ç–æ–≤–µ", callback_data="conditions")],
      [
        InlineKeyboardButton("–ì–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É", callback_data="gorpark"),
        InlineKeyboardButton("–ß—Ç–æ —Ä—è–¥–æ–º?", callback_data="geopermission")
      ]
      ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∏–π –ì—É–ª–ª–∏–≤–µ—Ä!\n\n"
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if len(TELEGRAM_BOT_TOKEN) > 20 else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"OpenWeather –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENWEATHER_API_KEY not in ['–≤–∞—à_–∫–ª—é—á_openweathermap_–∑–¥–µ—Å—å', 'your_openweather_api_key_here'] else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(weather, pattern="^conditions$"))
    app.add_handler(CallbackQueryHandler(geo_permission, pattern="^geopermission$"))

    # –ö—Ä–∞—Ç–∫–∏–π –≥–∏–¥
    app.add_handler(CallbackQueryHandler(gorpark, pattern="^gorpark$"))
    app.add_handler(CallbackQueryHandler(nabka, pattern="^nabka$"))
    app.add_handler(CallbackQueryHandler(lipki, pattern="^lipki$"))
    app.add_handler(CallbackQueryHandler(utoli, pattern="^utoli$"))
    app.add_handler(CallbackQueryHandler(conserva, pattern="^conserva$"))
    app.add_handler(CallbackQueryHandler(avenue, pattern="^avenue$"))
    app.add_handler(CallbackQueryHandler(circus, pattern="^circus$"))
    app.add_handler(MessageHandler(filters.LOCATION, near_to_me))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
    app.run_polling()

if __name__ == "__main__":
    main()
